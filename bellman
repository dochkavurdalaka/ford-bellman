list<int> Bellman(int n, int ST, int dest)
{

    vector<vector<int>> matrix(n);
    for (int i = 0; i < n; i++)
        matrix[i].resize(n);

    //matrix = { {0,1,3,0}, {1,0,4,0}, {3,4,0,11}, {0,0,11,0} };
    matrix = { {0,1,3,0}, {0,0,3,0}, {0,0,0,11}, {0,0,0,0} };


    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    int infin = 1000000;

    vector <int> d(n, infin);
    vector <list<int>> path(n);
    d[ST] = 0;



    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (d[k] != infin && d[k] + matrix[k][j] < d[j] && matrix[k][j]!=0) {
                    d[j] = d[k] + matrix[k][j];
                    path[j] = path[k];
                    path[j].push_back(j);
                }
            }
        }
    }


    for (int i = 0; i < n; i++) {
        cout << d[i] << " ";
    }
    cout << endl;

    for (int n : path[dest])
        cout << n << " ";


    return path[dest];
}


int main()
{
    int n = 4;
    //list<int> t = Bellman(n, 0, 3);
    Bellman(n, 0, 3);

   
}
